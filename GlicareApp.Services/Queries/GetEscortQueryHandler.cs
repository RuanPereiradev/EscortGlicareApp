// -----------------------------------------------------------------------------
// üìÑ Classe: GetEscortQueryHandler
// üì¶ Namespace: GlicareApp.Services.Queries
//
// üß† O que √©:
// Esta classe √© um "Query Handler" do padr√£o **CQRS** (Command Query Responsibility Segregation).
// Sua responsabilidade √© lidar com a consulta de um acompanhante (Escort) a partir do seu ID,
// utilizando o MediatR para separar l√≥gica de leitura da l√≥gica de escrita.
//
// üõ†Ô∏è O que faz:
// - Recebe uma requisi√ß√£o `GetEscortByIdQuery` contendo o ID do acompanhante.
// - Consulta o reposit√≥rio (`IEscortRepository`) para buscar o acompanhante correspondente.
// - Retorna o objeto `Escort` encontrado no banco.
//
// üîÅ Como funciona internamente:
// 1. O m√©todo `Handle` √© chamado automaticamente pelo MediatR quando a query √© disparada.
// 2. Ele utiliza o reposit√≥rio `IEscortRepository` para buscar o acompanhante pelo ID fornecido.
// 3. Retorna a entidade `Escort` encontrada (ou null, caso n√£o exista ‚Äî depende da implementa√ß√£o do reposit√≥rio).
//
// üîó Integra√ß√µes e depend√™ncias:
// - Utiliza o padr√£o Mediator (MediatR) para desacoplar a l√≥gica de busca.
// - Depende da interface `IEscortRepository` para o acesso a dados da entidade `Escort`.
// - A opera√ß√£o √© ass√≠ncrona e suporta `CancellationToken`.
//
// üìå Observa√ß√µes:
// - Essa classe representa a parte de **leitura** (queries) do sistema seguindo os princ√≠pios do CQRS.
// - Pode ser estendida futuramente para incluir valida√ß√µes, cache, logs, etc., se necess√°rio.
//
// -----------------------------------------------------------------------------
using GlicareApp.Domain.Entities;
using GlicareApp.Domain.Interfaces.Repositories;
using MediatR;

namespace GlicareApp.Services.Queries;

public class GetEscortQueryHandler : IRequestHandler<GetEscortByIdQuery, Escort>
{
    private readonly IEscortRepository _escortRepository;

    public GetEscortQueryHandler(IEscortRepository escortRepository)
    {
        _escortRepository = escortRepository;
    }
    public async Task<Escort> Handle(GetEscortByIdQuery request, CancellationToken cancellationToken)
    {
        return await _escortRepository.GetIdAsync(request.Id);

    }
}

